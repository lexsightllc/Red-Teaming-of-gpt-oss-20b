import logging
import random
import string

class SyntheticDataGenerator:
    """
    Generates safe-to-share synthetic data for red-teaming. (Point 44)
    """
    def __init__(self):
        logging.info("Initialized SyntheticDataGenerator.")

    def generate_synthetic_text(self, original_text, preserve_patterns=True):
        """
        Generates synthetic text that mimics statistical properties but
        replaces sensitive content.
        """
        logging.info("Generating synthetic text data.")
        if preserve_patterns:
            # Very simple conceptual pattern preservation (e.g., length, word count)
            words = original_text.split()
            synthetic_words = []
            for word in words:
                if len(word) > 5 and random.random() < 0.3: # Randomly replace some longer words
                    synthetic_words.append(''.join(random.choices(string.ascii_lowercase, k=len(word))))
                else:
                    synthetic_words.append(word)
            return ' '.join(synthetic_words) + " [SYNTHETIC]"
        else:
            # Simply generate random characters/words
            return ''.join(random.choices(string.ascii_lowercase + string.digits, k=len(original_text))) + " [SYNTHETIC_RANDOM]"

    def generate_synthetic_pii(self, pii_type="email"):
        """
        Generates synthetic PII (e.g., email, name, address).
        """
        logging.info(f"Generating synthetic PII of type: {pii_type}")
        if pii_type == "email":
            return f"synthetic.{random.randint(100,999)}@example.com"
        elif pii_type == "name":
            return f"Synthetic User {random.randint(1, 100)}"
        # Add more PII types as needed
        return "SYNTHETIC_PII"
