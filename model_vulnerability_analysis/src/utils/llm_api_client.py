import os
import requests
import logging

class LLMAPIClient:
    """
    A unified client for interacting with various LLM APIs.
    This abstracts away model provider specific calls.
    """
    def __init__(self, model_config):
        self.model_name = model_config.get("name", "unknown_model")
        self.api_endpoint = model_config.get("api_endpoint")
        
        # Get API key from environment variable for better security
        self.api_key = os.getenv("LLM_API_KEY")
        
        if not self.api_key:
            error_msg = "LLM_API_KEY environment variable not set. Please set it securely."
            logging.error(error_msg)
            raise ValueError(error_msg)
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        logging.info(f"Initialized LLMAPIClient for model: {self.model_name}")

    def query(self, prompt, temperature=0.7, max_tokens=150, **kwargs):
        """
        Sends a query to the LLM API and returns the response.
        Handles basic API interaction, error logging.
        """
        if not self.api_endpoint:
            logging.error("API endpoint not configured for LLMAPIClient.")
            raise ValueError("API endpoint not set.")

        payload = {
            "model": self.model_name,
            "prompt": prompt,
            "temperature": temperature,
            "max_tokens": max_tokens,
            **kwargs
        }

        try:
            response = requests.post(self.api_endpoint, headers=self.headers, json=payload)
            response.raise_for_status() # Raise an exception for HTTP errors
            return response.json().get('choices', [{}])[0].get('text', '').strip()
        except requests.exceptions.RequestException as e:
            logging.error(f"Error querying LLM API ({self.model_name}): {e}")
            return f"Error: {e}"
        except Exception as e:
            logging.error(f"Unexpected error in LLMAPIClient: {e}")
            return f"Error: {e}"

    def get_internal_activations(self, prompt):
        """
        Placeholder for retrieving internal model activations.
        This would require specific API support or direct model access. (Point 1, Point 5)
        """
        logging.warning("Internal activations retrieval not implemented for generic client. Requires specific model API support.")
        return {}
