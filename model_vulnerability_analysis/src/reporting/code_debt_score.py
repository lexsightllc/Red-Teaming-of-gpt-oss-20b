from __future__ import annotations
from typing import Dict
from src.analysis.code_metrics import ModuleMetrics

def complexity_debt_units(m: ModuleMetrics, weights: Dict[str, float] | None = None) -> float:
    w = {
        "sloc": 0.02,
        "cyclomatic_total": 1.0,
        "avg_fn_length": 0.5,
        "duplication_pct": 200.0,
        "imports": 0.5,
        "nesting_penalty": 2.0,
        "docstring_gap": 50.0,
        "mi_gap": 1.0
    }
    if weights: w.update(weights)
    nesting_max = max((f.max_nesting for f in m.functions), default=0)
    doc_gap = max(0.0, 1.0 - m.docstring_coverage)
    mi_gap = max(0.0, 100.0 - m.mi_proxy)
    score = (
        w["sloc"] * m.sloc +
        w["cyclomatic_total"] * m.cyclomatic_total +
        w["avg_fn_length"] * m.avg_fn_length +
        w["duplication_pct"] * m.duplication_pct +
        w["imports"] * m.imports +
        w["nesting_penalty"] * nesting_max +
        w["docstring_gap"] * doc_gap +
        w["mi_gap"] * mi_gap
    )
    return float(round(score, 2))
